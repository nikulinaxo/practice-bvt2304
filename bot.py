import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, html, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton

import vacancies
import db

TOKEN = '7471656640:AAEGx0xXM_Q4-Ms0wITshLqMydMMfOY3NIA'

dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: Message):
    if db.addUser(message.from_user.id):
        print("–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!"
                         '\n\n'
                         f'–ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:\n{html.bold('/search Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ú–æ—Å–∫–≤–∞')}')


class Form(StatesGroup):
    job = State()
    sch = State()
    exp = State()

data = []

hiddenData = []

@dp.message(Command('search'))
async def search(message: Message, state: FSMContext):

    query = message.text[8::]

    data.append(query)
    hiddenData.append(query)

    schs = []

    schs.append([KeyboardButton(text='–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å')])
    schs.append([KeyboardButton(text='–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫')])
    schs.append([KeyboardButton(text='–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫')])
    schs.append([KeyboardButton(text='–£–¥–∞–ª–µ–Ω–Ω–æ')])
    schs.append([KeyboardButton(text='–í–∞—Ö—Ç–∞')])



    await message.answer(f'üîç –ò—â–µ–º {query}\n–£–∫–∞–∂–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', reply_markup=ReplyKeyboardMarkup(keyboard=schs, one_time_keyboard=True, resize_keyboard=True))
    await state.set_state(Form.sch)


@dp.message(F.text, Form.sch)
async def getExp(message: Message, state: FSMContext):

    data.append(message.text)

    exp = []

    exp.append([KeyboardButton(text='–ë–µ–∑ –æ–ø—ã—Ç–∞')])
    exp.append([KeyboardButton(text='–û—Ç –≥–æ–¥–∞ –¥–æ —Ç—Ä–µ—Ö')])
    exp.append([KeyboardButton(text='–û—Ç —Ç—Ä–µ—Ö –¥–æ —à–µ—Å—Ç–∏')])
    exp.append([KeyboardButton(text='–ë–æ–ª–µ–µ —à–µ—Å—Ç–∏')])

    await message.answer(f'–ò —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–ø—ã—Ç—É...', reply_markup=ReplyKeyboardMarkup(keyboard=exp, one_time_keyboard=True, resize_keyboard=True))
    await state.set_state(Form.exp)

@dp.message(F.text, Form.exp)
async def final(message: Message, state: FSMContext):

    data.append(message.text)

    await message.answer(f"üîç –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏\n"
                         f"{data[0]}\n"
                         f"{data[1]}\n"
                         f"{data[2]}")

    await state.clear()

    match data[1]:
        case '–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å':
            data[1] = 'fullDay'
        case '–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫':
            data[1] = 'shift'
        case '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫':
            data[1] = 'flexible'
        case '–£–¥–∞–ª–µ–Ω–Ω–æ':
            data[1] = 'remote'
        case '–í–∞—Ö—Ç–∞':
            data[1] = 'flyInFlyOut'

    match data[2]:
        case '–ë–µ–∑ –æ–ø—ã—Ç–∞':
            data[2] = 'noExperience'
        case '–û—Ç –≥–æ–¥–∞ –¥–æ —Ç—Ä–µ—Ö':
            data[2] = 'between1And3'
        case '–û—Ç —Ç—Ä–µ—Ö –¥–æ —à–µ—Å—Ç–∏':
            data[2] = 'between3And6'
        case '–ë–æ–ª–µ–µ —à–µ—Å—Ç–∏':
            data[2] = 'moreThan6'

    for vac in vacancies.get(data[0], data[2], data[1]):

        btns = []

        btns.append([InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ...", url=vac['url'])])



        await message.answer(html.bold(vac['name']) +
                             f'\n{html.italic('–≤ –≥.' + vac['area'])}\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: \n' +
                             html.code(vac['req']) +
                             f'\n\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {html.bold(vac['sal'])}', reply_markup=InlineKeyboardMarkup(inline_keyboard=btns))

    data.clear()


@dp.message(Command('stats'))
async def stats(message: Message):

    userCount = db.getUserCount()
    popular = db.getPopular()

    await message.answer(html.bold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:'
                                   f'\n{userCount}'
                                   f'\n\n–°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:'
                                   f'{html.italic(popular[0])}'
                                   f'\n{html.bold(popular[1])} –≤–∞–∫–∞–Ω—Å–∏–π'))


async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    await dp.start_polling(bot)

